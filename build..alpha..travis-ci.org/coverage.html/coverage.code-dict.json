{"/home/travis/build/npmtest/node-npmtest-svg2png/test.js":"/* istanbul instrument in package npmtest_svg2png */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-svg2png/lib.npmtest_svg2png.js":"/* istanbul instrument in package npmtest_svg2png */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_svg2png = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_svg2png = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-svg2png/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-svg2png && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_svg2png */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_svg2png\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_svg2png.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_svg2png.rollup.js'] =\n            local.assetsDict['/assets.npmtest_svg2png.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_svg2png.__dirname + '/lib.npmtest_svg2png.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-svg2png/node_modules/svg2png/lib/svg2png.js":"\"use strict\";\nconst path = require(\"path\");\nconst fileURL = require(\"file-url\");\nconst childProcess = require(\"pn/child_process\");\n\nconst phantomjsCmd = require(\"phantomjs-prebuilt\").path;\nconst converterFileName = path.resolve(__dirname, \"./converter.js\");\n\nconst PREFIX = \"data:image/png;base64,\";\n\nmodule.exports = (sourceBuffer, options) => {\n    return Promise.resolve().then(() => { // catch thrown errors\n        const cp = childProcess.execFile(phantomjsCmd, getPhantomJSArgs(options), { maxBuffer: Infinity });\n\n        writeBufferInChunks(cp.stdin, sourceBuffer);\n\n        return cp.promise.then(processResult);\n    });\n};\n\nmodule.exports.sync = (sourceBuffer, options) => {\n    const result = childProcess.spawnSync(phantomjsCmd, getPhantomJSArgs(options), {\n        input: sourceBuffer.toString(\"utf8\")\n    });\n    return processResult(result);\n};\n\nfunction getPhantomJSArgs(options = {}) {\n    if (options.filename !== undefined && options.url !== undefined) {\n        throw new Error(\"Cannot specify both filename and url options\");\n    }\n\n    // Convert filename option to url option\n    if (options.filename !== undefined) {\n        options = Object.assign({ url: fileURL(options.filename) }, options);\n        delete options.filename;\n    }\n\n    return [\n        converterFileName,\n        JSON.stringify(options)\n    ];\n}\n\nfunction writeBufferInChunks(writableStream, buffer) {\n    const asString = buffer.toString(\"utf8\");\n\n    const INCREMENT = 1024;\n\n    writableStream.cork();\n    for (let offset = 0; offset < asString.length; offset += INCREMENT) {\n        writableStream.write(asString.substring(offset, offset + INCREMENT));\n    }\n    writableStream.end();\n}\n\nfunction processResult(result) {\n    const stdout = result.stdout.toString();\n    if (stdout.startsWith(PREFIX)) {\n        return new Buffer(stdout.substring(PREFIX.length), \"base64\");\n    }\n\n    if (stdout.length > 0) {\n        // PhantomJS always outputs to stdout.\n        throw new Error(stdout.replace(/\\r/g, \"\").trim());\n    }\n\n    const stderr = result.stderr.toString();\n    if (stderr.length > 0) {\n        // But hey something else might get to stderr.\n        throw new Error(stderr.replace(/\\r/g, \"\").trim());\n    }\n\n    throw new Error(\"No data received from the PhantomJS child process\");\n}\n","/home/travis/build/npmtest/node-npmtest-svg2png/node_modules/svg2png/bin/svg2png-cli.js":"#!/usr/bin/env node\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst yargs = require(\"yargs\");\nconst svg2png = require(\"..\");\nconst packageJSON = require(\"../package.json\");\n\nconst argv = yargs\n    .usage(`${packageJSON.description}\\n\\n${packageJSON.name} input.svg ` +\n           `[--output=output.png] [--width=300] [--height=150]`)\n    .option(\"o\", {\n        alias: \"output\",\n        type: \"string\",\n        describe: \"The output filename; if not provided, will be inferred\"\n    })\n    .option(\"w\", {\n        alias: \"width\",\n        type: \"string\",\n        describe: \"The output file width, in pixels\"\n    })\n    .option(\"h\", {\n        alias: \"height\",\n        type: \"string\",\n        describe: \"The output file height, in pixels\"\n    })\n    .demand(1)\n    .help(false)\n    .version()\n    .argv;\n\n// TODO if anyone asks for it: support stdin/stdout when run that way\n\nconst input = fs.readFileSync(argv._[0]);\nconst output = svg2png.sync(input, { width: argv.width, height: argv.height, filename: argv._[0] });\n\nconst outputFilename = argv.output || path.basename(argv._[0], \".svg\") + \".png\";\nfs.writeFileSync(outputFilename, output, { flag: \"wx\" });\n","/home/travis/build/npmtest/node-npmtest-svg2png/node_modules/svg2png/lib/converter.js":"/* eslint-env phantomjs */\n/* eslint-disable no-console, no-var, prefer-arrow-callback, object-shorthand */\n\"use strict\";\n\nvar webpage = require(\"webpage\");\nvar system = require(\"system\");\n\nvar HTML_PREFIX = \"<!DOCTYPE html><style>html, body { margin: 0; padding: 0; } \" +\n                  \"svg { position: absolute; top: 0; left: 0; }</style>\";\n\nif (system.args.length !== 2) {\n    console.error(\"Usage: converter.js options\");\n    phantom.exit();\n} else {\n    convert(system.args[1]);\n}\n\nfunction convert(options) {\n    try {\n        options = JSON.parse(options);\n    } catch (e) {\n        console.error(\"Unable to parse options.\");\n        console.error(e);\n        phantom.exit();\n        return;\n    }\n\n    var page = webpage.create();\n\n    var source = \"\";\n    while (!system.stdin.atEnd()) {\n        source += system.stdin.readLine() + \"\\n\";\n    }\n\n    page.onLoadFinished = function (status) {\n        if (status !== \"success\") {\n            console.error(\"Unable to load the source file.\");\n            phantom.exit();\n            return;\n        }\n\n        try {\n            if (options.width !== undefined || options.height !== undefined) {\n                setSVGDimensions(page, options.width, options.height);\n            }\n\n            var dimensions = getSVGDimensions(page);\n            if (!dimensions) {\n                console.error(\"Width or height could not be determined from either the source file or the supplied \" +\n                              \"dimensions\");\n                phantom.exit();\n                return;\n            }\n\n            setSVGDimensions(page, dimensions.width, dimensions.height);\n\n            page.viewportSize = {\n                width: dimensions.width,\n                height: dimensions.height\n            };\n            page.clipRect = {\n                top: 0,\n                left: 0,\n                width: dimensions.width,\n                height: dimensions.height\n            };\n        } catch (e) {\n            console.error(\"Unable to calculate or set dimensions.\");\n            console.error(e);\n            phantom.exit();\n            return;\n        }\n\n        var result = \"data:image/png;base64,\" + page.renderBase64(\"PNG\");\n        system.stdout.write(result);\n        phantom.exit();\n    };\n\n    // PhantomJS will always render things empty if you choose about:blank, so that's why the different default URL.\n    // PhantomJS's setContent always assumes HTML, not SVG, so we have to massage the page into usable HTML first.\n    page.setContent(HTML_PREFIX + source, options.url || \"http://example.com/\");\n}\n\nfunction setSVGDimensions(page, width, height) {\n    if (width === undefined && height === undefined) {\n        return;\n    }\n\n    page.evaluate(function (widthInside, heightInside) {\n        /* global document: false */\n        var el = document.querySelector(\"svg\");\n\n        if (widthInside !== undefined) {\n            el.setAttribute(\"width\", widthInside + \"px\");\n        } else {\n            el.removeAttribute(\"width\");\n        }\n\n        if (heightInside !== undefined) {\n            el.setAttribute(\"height\", heightInside + \"px\");\n        } else {\n            el.removeAttribute(\"height\");\n        }\n    }, width, height);\n}\n\nfunction getSVGDimensions(page) {\n    return page.evaluate(function () {\n        /* global document: false */\n\n        var el = document.querySelector(\"svg\");\n\n        var widthIsPercent = /%\\s*$/.test(el.getAttribute(\"width\") || \"\"); // Phantom doesn't have endsWith\n        var heightIsPercent = /%\\s*$/.test(el.getAttribute(\"height\") || \"\");\n        var width = !widthIsPercent && parseFloat(el.getAttribute(\"width\"));\n        var height = !heightIsPercent && parseFloat(el.getAttribute(\"height\"));\n\n        if (width && height) {\n            return { width: width, height: height };\n        }\n\n        var viewBoxWidth = el.viewBox.animVal.width;\n        var viewBoxHeight = el.viewBox.animVal.height;\n\n        if (width && viewBoxHeight) {\n            return { width: width, height: width * viewBoxHeight / viewBoxWidth };\n        }\n\n        if (height && viewBoxWidth) {\n            return { width: height * viewBoxWidth / viewBoxHeight, height: height };\n        }\n\n        return null;\n    });\n}\n"}